{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview TuxPay is a self-hosted, non-custodial payment processing server for cryptocurrencies. TuxPay provides the facilities to automate payments in an E-commerce environment, or to simply act as an invoicing/payment solution for a business. TuxPay utilizes the existing network of public ElectrumX servers - this allows you to monitor incoming payments for multiple coins without requiring your own full nodes or relying on a custodial service. For those with more business critical requirements you can also point your payment server at your own private or trusted ElectrumX servers. Installation Guide Usage Guide Integration Guide API Documentation","title":"Overview"},{"location":"#overview","text":"TuxPay is a self-hosted, non-custodial payment processing server for cryptocurrencies. TuxPay provides the facilities to automate payments in an E-commerce environment, or to simply act as an invoicing/payment solution for a business. TuxPay utilizes the existing network of public ElectrumX servers - this allows you to monitor incoming payments for multiple coins without requiring your own full nodes or relying on a custodial service. For those with more business critical requirements you can also point your payment server at your own private or trusted ElectrumX servers.","title":"Overview"},{"location":"#installation-guide","text":"","title":"Installation Guide"},{"location":"#usage-guide","text":"","title":"Usage Guide"},{"location":"#integration-guide","text":"","title":"Integration Guide"},{"location":"#api-documentation","text":"","title":"API Documentation"},{"location":"installation/","text":"Installation Manual Installation System dependencies sudo apt install python3-pip libsecp256k1-dev npm wkhtmltopdf Optionally install tor to connect to .onion electrumx servers. Create virtual environment & Install dependencies. Note that sqlite is installed by default, but if you are using an external database server you will need to install the appropriate RDBMS package separately, e.g. pip3 install databases[mysql] or databases[postgresql] python3 -m venv venv source venv/bin/activate pip3 install -r requirements.txt Build the JS SDK cd sdk npm install npm run build cd .. Build the Admin front-end cd admin npm install npm run generate cd .. Run the initial setup wizard (this generates all of the wallet roots and sets up currencies - rerun the wizard to change/overwrite the existing config) python3 setup.py Edit the configuration as you see fit. see data/config.examples.ini for more information on the configuration cp data/config.default.ini data/config.ini nano data/config.ini # or your preferred text editor To set up the system service you will first need to edit tuxpay.service and fill out the templated fields with the path of the install location. The specified user needs to have read access of the directory (and write access to at least the data folder), so permissions will need to be set appropriately, or the user will need to be changed. cp tuxpay.service /etc/systemd/system/tuxpay.service sudo systemctl daemon-reload sudo service tuxpay enable && sudo service tuxpay start Installation (docker) # Builds container docker-compose build # Runs the setup script - see the configuration file for additional options afterwards docker run -it -v \"[ABSOLUTE PATH TO ./data/]:/tuxpay/data/\" tuxpay python3 setup.py # Runs the container as a service (will auto-restart as long as docker daemon is running) docker-compose up -d","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#manual-installation","text":"System dependencies sudo apt install python3-pip libsecp256k1-dev npm wkhtmltopdf Optionally install tor to connect to .onion electrumx servers. Create virtual environment & Install dependencies. Note that sqlite is installed by default, but if you are using an external database server you will need to install the appropriate RDBMS package separately, e.g. pip3 install databases[mysql] or databases[postgresql] python3 -m venv venv source venv/bin/activate pip3 install -r requirements.txt Build the JS SDK cd sdk npm install npm run build cd .. Build the Admin front-end cd admin npm install npm run generate cd .. Run the initial setup wizard (this generates all of the wallet roots and sets up currencies - rerun the wizard to change/overwrite the existing config) python3 setup.py Edit the configuration as you see fit. see data/config.examples.ini for more information on the configuration cp data/config.default.ini data/config.ini nano data/config.ini # or your preferred text editor To set up the system service you will first need to edit tuxpay.service and fill out the templated fields with the path of the install location. The specified user needs to have read access of the directory (and write access to at least the data folder), so permissions will need to be set appropriately, or the user will need to be changed. cp tuxpay.service /etc/systemd/system/tuxpay.service sudo systemctl daemon-reload sudo service tuxpay enable && sudo service tuxpay start","title":"Manual Installation"},{"location":"installation/#installation-docker","text":"# Builds container docker-compose build # Runs the setup script - see the configuration file for additional options afterwards docker run -it -v \"[ABSOLUTE PATH TO ./data/]:/tuxpay/data/\" tuxpay python3 setup.py # Runs the container as a service (will auto-restart as long as docker daemon is running) docker-compose up -d","title":"Installation (docker)"},{"location":"integration/","text":"Integration Much of the information on this page will need to be supplemented with that found on the API documentation page While not strictly necessary, there is a javascript SDK bundled with the payment server. The SDK is served via the /tuxpay.js endpoint. The general integration flow is similar to that of the Paypal pay button: Server generates an invoice on the backend (or a raw payment if the payment coin is known) Client includes the TuxPay JS SDK on their page and launches the payment modal using TuxPay.render({arguments}) where arguments is an object containing (some of) the following data: payment_uuid - the UUID of the payment object. Can also be passed in the query string under the key uuid invoice_token - JWT token attached to the invoice object. Can also be present in the query string under the key token is_modal - boolean, whether the payment window should be a dismissable modal redirect - optional, URL to redirect to upon successful payment. Can also be passed to the query string. The payment server hosts a blank HTML file containing the SDK at the path /payment , such that you can bounce customers directly to a payment interstitial using the link format http://tuxpay.com/payment?token=XXXXXXX.YYYYYYY&redirect=cart_url Payment is verified by E-commerce backend/cart using admin API calls. If you aren't using an interstitial, you can subscribe to the 'payment' event listener in your cart, e.g. document.addEventListener('payment', (evt => { CODE TO VERIFY TRANSACTION SERVER SIDE })) Client is notified of completed payment in the cart/checkout page.","title":"Integration"},{"location":"integration/#integration","text":"Much of the information on this page will need to be supplemented with that found on the API documentation page While not strictly necessary, there is a javascript SDK bundled with the payment server. The SDK is served via the /tuxpay.js endpoint. The general integration flow is similar to that of the Paypal pay button: Server generates an invoice on the backend (or a raw payment if the payment coin is known) Client includes the TuxPay JS SDK on their page and launches the payment modal using TuxPay.render({arguments}) where arguments is an object containing (some of) the following data: payment_uuid - the UUID of the payment object. Can also be passed in the query string under the key uuid invoice_token - JWT token attached to the invoice object. Can also be present in the query string under the key token is_modal - boolean, whether the payment window should be a dismissable modal redirect - optional, URL to redirect to upon successful payment. Can also be passed to the query string. The payment server hosts a blank HTML file containing the SDK at the path /payment , such that you can bounce customers directly to a payment interstitial using the link format http://tuxpay.com/payment?token=XXXXXXX.YYYYYYY&redirect=cart_url Payment is verified by E-commerce backend/cart using admin API calls. If you aren't using an interstitial, you can subscribe to the 'payment' event listener in your cart, e.g. document.addEventListener('payment', (evt => { CODE TO VERIFY TRANSACTION SERVER SIDE })) Client is notified of completed payment in the cart/checkout page.","title":"Integration"},{"location":"usage/","text":"Usage After installation, the server will be launched on port 8000 by default. The payment server has a built-in admin panel that can be reached at the URL /admin - you will need to authenticate with the email and password provided when running the setup.py script. From here you can create new invoices or payment requests Invoices The invoice are the high level payment object used by TuxPay. An invoice consists of a fiat amount, and an expiration date. Until an invoice expires, any number of payment addresses can be created against it, payment addresses will be watched until they expire, and any completed payment will mark the parent invoice as completed. Upon creation in the admin panel, each invoice will provide a link that can be used to pay the invoice which can be distributed to customers. Payment Payments are low level payment objects - each payment consists of a payment currency and a coin amount. When created from an invoice, the payment amount in coin is inferred from the fiat amount of the invoice, and set to expire within a short window (configurable; 15m by default). If a payment expires, a new address can be created against the invoice. When payments are created from the API/Admin panel, a parent invoice object is created automatically and the payment is attached to it.","title":"Usage"},{"location":"usage/#usage","text":"After installation, the server will be launched on port 8000 by default. The payment server has a built-in admin panel that can be reached at the URL /admin - you will need to authenticate with the email and password provided when running the setup.py script. From here you can create new invoices or payment requests","title":"Usage"},{"location":"usage/#invoices","text":"The invoice are the high level payment object used by TuxPay. An invoice consists of a fiat amount, and an expiration date. Until an invoice expires, any number of payment addresses can be created against it, payment addresses will be watched until they expire, and any completed payment will mark the parent invoice as completed. Upon creation in the admin panel, each invoice will provide a link that can be used to pay the invoice which can be distributed to customers.","title":"Invoices"},{"location":"usage/#payment","text":"Payments are low level payment objects - each payment consists of a payment currency and a coin amount. When created from an invoice, the payment amount in coin is inferred from the fiat amount of the invoice, and set to expire within a short window (configurable; 15m by default). If a payment expires, a new address can be created against the invoice. When payments are created from the API/Admin panel, a parent invoice object is created automatically and the payment is attached to it.","title":"Payment"}]}